# PRD — Worb

## 1) Коротко
- **Цель:** веб‑клиент на DivKit с бэкендом Flask, который рендерит страницы из JSON‑шаблонов и заполняет их данными из Strapi.
- **Основные страницы:**  
  - **Home** (`/home`, SPA: `/view/home`) — список вкладок/уроков (табы), шапка/счетчики/прогресс.  
  - **Lesson** (`/lesson/<id>?i=<index>`, SPA: `/view/lesson/<id>?i=<index>`) — карточка шага урока: термин, картинка, 2 варианта ответа, переход на следующий шаг.  
  - **Test** (`/view/page/test`) — песочница для визуальной проверки компонентов (без данных из Strapi).
- **Клиент:** одна страница (`index.html` + `client.js`) с DivKit; навигация и экшены обрабатывает `client.js`.
- **Данные:** Strapi (категории/уроки/слова). Чтение по API‑токену (read‑only).
- **Логи:** POST `/log` для телеметрии кликов/событий DivKit.

## 2) Пользовательские сценарии
1. Открыть приложение → попасть на Home → увидеть актуальные табы/уроки.
2. Тап по уроку → открывается Lesson первого шага (или указанного `?i`).
3. Выбор ответа → при правильном переход к `i+1`, на последнем шаге → редирект на Home.
4. (Опционально) переключение состояний компонентов (например, LessonCard: `default/brand/disabled`) для визуальной индикации прогресса.
5. Все клики логируются в `/log`.

## 3) Экран «Home»
- **Источник JSON:** `apps/web/ui/pages/home.json` (через include’ы).  
- **Данные табов:** собираются на бэкенде из Strapi и **вкладываются** в DOM карточки по `id` контейнера (предпочтительно `home_tabs`, поддерживаются и старые id: `home_lessons_tabs`, `home_lessons`, `tabs`, `tabs_container`).  
- **Темизация:** через токены (`colors.light.json` и т.п.), применяются на бэкенде (Design Tokens → apply).  
- **Навигация:** клики отдают action с url/log_id, `client.js` переводит на `/view/...`.

### Acceptance
- Если Strapi недоступен — Home отрисовывается с дефолтным шаблоном (без падения).
- Если контейнер табов не найден по id — бэкенд пишет WARN, страница рендерится.
- Все иконки/ассеты из `ui/icons` доступны под `/ui/icons/*`.

## 4) Экран «Lesson»
- **Эндпоинт:** `/lesson/<id>?i=<0..N-1>`; SPA‑маршрут: `/view/lesson/<id>?i=...`.
- **Шаблон:** `ui/pages/lesson.json` (+ include компонентов).  
- **Данные:** из Strapi → нормализуются в `to_divkit_lesson` → список `words` (term, translation, distractor1, image).  
- **Поведение:**
  - `i` нормализуется в границы `[0..N-1]`.  
  - Правильный/неправильный вариант размещаются случайно по лево/право.  
  - На последнем шаге «правильный» ведёт на `/view/home`.  
  - Пустые/битые данные → шаблон с плейсхолдерами (fallback).
- **Патч карточки:** бэкенд заменяет узлы по `id` (например, `word_term`, `word_image`, `choice_left_text`, `choice_right_text`, `choice_left`, `choice_right`).

### Acceptance
- Абсолютные/относительные картинки: если путь начинается с `/`, префиксуется `STRAPI_URL` (env), иначе используется как есть.
- При ошибке Strapi JSON отдается без данных (UI не падает).
- Все action’ы кликов ведут через `client.js`, логируются в `/log`.

## 5) Тестовая страница
- **Маршрут:** `/view/page/test` → грузит `ui/pages/test.json` как есть (без Strapi).
- Используется для визуальной сборки/проверки компонентов и их `states`.

## 6) Архитектура бэкенда
- **Flask app** с блюпринтами:
  - `spa.py` — SPA‑вход (`/`, `/client.js`, `/view/*` → `index.html`).
  - `home.py` — `/home`: загрузка шаблона, include, токены, сборка табов из Strapi, встраивание по `id`.
  - `lessons.py` — `/lesson/<id>`: загрузка шаблона, include, получение урока из Strapi, патч по `id`, логика переходов.
  - `log.py` — `/log`: приём событий (POST).
  - `health.py` — `/health`: простой OK.
- **Core утилиты:**
  - `paths.py` — `WEB_DIR`, `UI_DIR` и т.п.
  - `ui.py` — `resolve_includes`, `apply_design_tokens`, `replace_node_by_id`, `build_home_tabs_from_strapi` и др.
- **Конфиги:** `.env` (в т.ч. `STRAPI_URL`, `STRAPI_TOKEN`).

## 7) Архитектура фронтенда
- **`index.html`** — контейнер для DivKit и подключения `client.js`.
- **`client.js`**:
  - SPA‑роутинг: `/view/*` → маппится на `/home`, `/lesson/<id>`, либо `ui/pages/<tail>.json`.
  - Рендер: `DivKit.render` и `div.setData(json)`.
  - Обработчики: `onAction`/`onStat` → логирование в `/log`, переходы, поддержка «семантических» `log_id` (`go_home`, `open_lesson`) и прямых `url`.
  - (Опционально) переключение состояний state‑компонентов через `div.setState` или fallback‑патч JSON.
- **Ассеты:** `ui/icons/*`, `ui/components/*`, `ui/pages/*`, `ui/tokens/*`.

## 8) Интеграция со Strapi
- **Требуемые типы:** `Category`, `Lesson`, `Word` (или эквивалент).  
- **Права API токена:** `find/findOne` для публичного чтения нужных коллекций.
- **Нормализация:** функции `get_lesson`, `get_lesson_by_slug` (если используется), `to_divkit_lesson`, `get_categories` (для табов).
- **Ошибки сети/авторизации:** не ломают рендер — просто нет/минимум данных.

## 9) Телеметрия
- **Эндпоинт:** `POST /log`.  
- **Формат:** `{ event: <log_id|click>, payload: {...}, ts: <unix_ms> }`.
- **Минимум:** логируем каждый клик/экшен DivKit.

## 10) Дизайн‑токены/темы
- Токены цвета/отступов/радиусов лежат в `ui/tokens`.  
- Бэкенд применяет их к карточке перед отдачей (`apply_design_tokens`).

## 11) Ошибки/фолбэки
- Отсутствие инклуда (`$include`) → бэкенд логирует и подставляет «заглушку» (серый контейнер 64px с замком).
- Не найден контейнер под табы — WARN в лог, страница рендерится.
- 404 по SPA‑путям `/view/*` — всегда отдаём `index.html`, а `client.js` дальше уже догружает JSON.

## 12) Нефункциональные
- **Производительность:** 1 сеть‑запрос JSON на экран + ассеты; кэш браузера для иконок/JS/CSS.  
- **Надёжность:** UI не должен «падать» при пустом/частичном JSON или проблемах Strapi.  
- **Безопасность:** токен Strapi хранится только на сервере (.env).  
- **Совместимость:** Desktop/мобильные браузеры последних 2 версий.

## 13) Окружения/запуск (минимум)
- **Backend:** Python 3.10+ (Flask, python‑dotenv и т.д.).  
  - `pip install -r apps/backend/requirements.txt`  
  - `cd apps/backend && python app.py`
- **CMS:** Strapi локально (`http://localhost:1337`) с нужными коллекциями и read‑only API‑токеном.
- **Frontend:** статика из `apps/web` (отдаёт Flask).

## 14) Проверочные кейсы (smoke)
- `/view/home` рендерит шапку + кнопку + контейнер табов.
- При поднятом Strapi табы заполняются, клик по уроку ведёт на `/view/lesson/<id>`.
- `/view/lesson/<id>?i=0` показывает слово, два варианта; правильный → следующий шаг; на последнем — домой.
- `/view/page/test` рендерит тестовый JSON (виджеты, состояния).
- `/log` принимает события, в консоли видны записи.

## 15) Что вне скоупа (сейчас)
- Авторизация пользователей, прогресс‑синк, календарь/профиль.
- Роуты по slug для уроков (пока по `id`, slug — отложено).
- Серверный кэш данных Strapi.

## 16) Открытые вопросы
- Нужна ли поддержка slug‑роутов для уроков параллельно с `id`?
- Формат и хранение телеметрии (пока в stdout, дальше — БД/аналитика?).
- Политика кэша для Strapi (ETag/TTL?).

## 17) Стандарты компонентов и якоря
- **ID якорей** (используются бэкендом для патчинга JSON):
  - `home_tabs` — контейнер, куда вкладываются табы с уроками (поддерживаем также: `home_lessons_tabs`, `home_lessons`, `tabs`, `tabs_container`).
  - `word_image` — картинка слова на экране урока.
  - `word_term` — термин/слово.
  - `choice_left`, `choice_right` — контейнеры кликабельных вариантов.
  - `choice_left_text`, `choice_right_text` — тексты вариантов.
  - Для новых компонентов заводим осмысленные id и описываем их здесь.

- **Конвенции именования**:
  - Компоненты: `snake_case`, префикс по области: `header_*`, `lesson_*`, `home_*`.
  - Страницы: `pages/*.json`, компоненты: `components/**/*.json`, токены: `tokens/*.json`.

- **Состояния (states)**:
  - State-компоненты используются для визуальных вариаций (например, карточка урока: `default/brand/disabled`).
  - Переключение состояния на клиенте: через `div.setState({ id: <state_id>, state_id: <name> })` из `client.js`.
  - Сервер не меняет state — только подставляет данные и действия.

## 18) Контракты с Strapi (модели и API)
- **Category**: `{ id, title, slug, order, lessons: [Lesson] }`
- **Lesson**: `{ id, title, slug, order, words: [Word] }`
- **Word**: `{ id, term, translation, distractor1, image: { url } }`

- **Эндпоинты (read-only, через API Token):**
  - Категории с уроками: `GET /api/categories?populate[lessons]=*&sort[0]=order:asc`
  - Урок с словами: `GET /api/lessons/:id?populate[words][populate]=image`
  - (Опционально) Урок по слагу: `GET /api/lessons?filters[slug][$eq]=<slug>&populate[words][populate]=image`

- **Нормализация на бэкенде** (пример выхода `to_divkit_lesson`):
  ```json
  {
    "id": 2,
    "title": "Урок 1",
    "words": [
      { "term": "аптека", "translation": "pharmacy", "distractor1": "hospital", "image_url": "/uploads/apteka.png" }
    ]
  }
  ```

## 19) JSON-шаблоны: правила и фолбэки
- В шаблонах допускаются `$include` с относительными путями и путями из корня `ui/` (`/components/...`, `/pages/...`).
- Рекурсивные include'ы разрешены; выход за пределы `ui/` блокируется.
- Если include не найден — сервер подставляет заглушку: серый контейнер 64px с иконкой «замок», страница при этом рендерится.
- Все страницы должны иметь корневую структуру DivKit `{ card: { states: [{ state_id: 0, div: {...}}] } }`.

## 20) Темизация и дизайн‑токены
- Токены лежат в `apps/web/ui/tokens/` (например, `colors.light.json`).
- Сервер накладывает токены перед отдачей карточки (простая текстовая замена `{{token.name}}` → значение).
- Конвенция имён токенов: `color.*`, `radius.*`, `space.*`, `font.*`.
- В шаблонах избегаем хардкода цветов — используем токены.

## 21) События и телеметрия
- Все `onAction/onStat` попадают в `POST /log` в формате:
  ```json
  { "event": "<log_id>", "payload": { ... }, "ts": 1712345678901 }
  ```
- Резерв лог-идов (семантические): `go_home`, `open_lesson`, `next_word`, `lesson_card_set_state`.
- Ошибки DivKit/сети логируются в консоль клиента.

## 22) Производительность и офлайн (черновик)
- Цель: ≤1 JSON-запрос на экран; ассеты кэшируются браузером.
- Ближайший шаг: локальный кэш последнего урока на клиенте (in-memory) + префетч следующего шага.
- Дальше: Service Worker (PWA) для офлайн-режима (отложено).

## 23) Тестирование
- **Smoke** (ручные сценарии из раздела 14) — при каждом изменении шаблонов/роутов.
- **Автотесты (минимум)**: модульные тесты для `ui.resolve_includes`, `ui.replace_node_by_id`, `strapi_client.to_divkit_lesson`.
- **Страница `/view/page/test`** — визуальная проверка компонентов и их состояний.

## 24) Деплой и окружения (минимум)
- Dev: локально (`Flask` + `Strapi` на `localhost:1337`).
- Staging/Prod: WSGI/ASGI сервер (gunicorn/uvicorn) + reverse-proxy (nginx). Токены — из переменных окружения.
- Git‑флоу: feature‑ветки → PR → squash‑merge; tag‑релизы по мажорным изменениям шаблонов/API.

## 25) Чеклист «как добавить новую страницу»
1. Создать `apps/web/ui/pages/<page>.json` + нужные компоненты в `components/`.
2. Если страница статическая — открыть на `/view/page/<page>` (клиент сам загрузит JSON).
3. Если страница динамическая — добавить обработчик в соответствующий блюпринт (`routes/*`) и при необходимости утилиты.
4. Прописать якоря `id` для динамической подстановки данных.
5. Обновить PRD/README и smoke‑кейс.

## 26) Безопасность
- API‑токен Strapi хранится только на сервере (.env), в клиент не попадает.
- Не логируем чувствительные данные пользователей.
- CORS/Headers — по умолчанию закрыто; открываем только необходимые маршруты.

## 27) Глоссарий
- **DivKit** — рендерер UI из JSON.
- **Шаблон** — JSON файла страницы/компонента с `$include`.
- **Якорь (id)** — узел в JSON, который сервер изменяет (текст/картинку/действие).
- **State‑компонент** — компонент DivKit с несколькими визуальными состояниями.

## 28) Открытые вопросы (добавлено)
- Нужна ли параллельная поддержка маршрутов уроков по `slug`?
- Правила сортировки уроков/категорий (по `order`/title?) и пагинация.
- Кэширование ответов Strapi (ETag/TTL) на сервере.
